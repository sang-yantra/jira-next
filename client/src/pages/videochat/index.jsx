import React, { useContext, useState } from "react";
import { v4 as uuidv4 } from "uuid";
import { ContextProvider, SocketContext } from "./SocketContext";
import Head from "next/head";

import {
  Button,
  TextField,
  Grid,
  Typography,
  Container,
  Paper,
} from "@material-ui/core";
import { CopyToClipboard } from "react-copy-to-clipboard";
import { Assignment, Phone, PhoneDisabled } from "@material-ui/icons";
import { makeStyles } from "@material-ui/core/styles";

function VideoChat() {
  return (
    <div className="app">
      <Head>
        <title>Video Call App</title>
        <meta name="description" content="Generated by create next app" />
        <link
          rel="stylesheet"
          href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap"
        />
      </Head>

      <ContextProvider>
        <header
          className=" bg-zinc-900 w-full h-[80px] text-4xl font-bold
                flex justify-center items-center"
        >
          <h1>Video Chat</h1>
        </header>

        <section>
          <main>
            <VideoPlayer />
            <Options>
              <Notifications />
            </Options>
          </main>
        </section>
      </ContextProvider>
    </div>
  );
}

const VideoPlayer = () => {
  const { name, callAccepted, myVideo, userVideo, callEnded, stream, call } =
    useContext(SocketContext);

  return (
    <div className=" bg-zinc-900 w-[80%] h-[600px] m-auto mt-4 flex justify-center p-4">
      {stream && (
        <div className="bg-zinc-800 flex-1 border-4 border-blue-400">
          <h2>{name || "Name"}</h2>
          <video
            playsInline
            muted
            ref={myVideo}
            autoPlay
            className="w-[100%] h-[90%]"
          />
        </div>
      )}
      {callAccepted && !callEnded && (
        <div className="bg-zinc-800 flex-1 border-4 border-blue-400">
          <h2>{call?.name || "Name"}</h2>
          <video
            playsInline
            ref={userVideo}
            autoPlay
            width={"100%"}
            height={"100%"}
          />
        </div>
      )}
    </div>
  );
};

const Options = ({ children }) => {
  const { me, callAccepted, name, setName, callEnded, leaveCall, callUser } =
    useContext(SocketContext);
  const [idToCall, setIdToCall] = useState("");
  return (
    <div>
      <div>
        {/* <form className={classes.root} noValidate autoComplete="off">
          <Grid container className={classes.gridContainer}>
            <Grid item xs={12} md={6} className={classes.padding}>
              <Typography gutterBottom variant="h6">Account Info</Typography>
              <TextField label="Name" value={name} onChange={(e) => setName(e.target.value)} fullWidth />
              <CopyToClipboard text={me} className={classes.margin}>
                <Button variant="contained" color="primary" fullWidth startIcon={<Assignment fontSize="large" />}>
                  Copy Your ID
                </Button>
              </CopyToClipboard>
            </Grid>
            <Grid item xs={12} md={6} className={classes.padding}>
              <Typography gutterBottom variant="h6">Make a call</Typography>
              <TextField label="ID to call" value={idToCall} onChange={(e) => setIdToCall(e.target.value)} fullWidth />
              {callAccepted && !callEnded ? (
                <Button variant="contained" color="secondary" startIcon={<PhoneDisabled fontSize="large" />} fullWidth onClick={leaveCall} className={classes.margin}>
                  Hang Up
                </Button>
              ) : (
                <Button variant="contained" color="primary" startIcon={<Phone fontSize="large" />} fullWidth onClick={() => callUser(idToCall)} className={classes.margin}>
                  Call
                </Button>
              )}
            </Grid>
          </Grid>
        </form> */}
        {children}
      </div>
    </div>
  );
};

const Notifications = () => {
  return <div>Notifications</div>;
};

export default VideoChat;
