import React, { useContext, useState } from "react";
import { v4 as uuidv4 } from "uuid";
import { ContextProvider, SocketContext } from "./SocketContext";
import Head from "next/head";
import { CopyToClipboard } from "react-copy-to-clipboard";

function VideoChat() {
  return (
    <div className="app">
      <Head>
        <title>Video Call App</title>
        <meta name="description" content="Generated by create next app" />
      </Head>

      <ContextProvider>
        <header
          className=" bg-zinc-900 w-full h-[80px] text-4xl font-bold
                flex justify-center items-center"
        >
          <h1>Video Chat</h1>
        </header>

        <section>
          <main>
            <VideoPlayer />
            <Options>
              <Notifications />
            </Options>
          </main>
        </section>
      </ContextProvider>
    </div>
  );
}

const VideoPlayer = () => {
  const { name, callAccepted, myVideo, userVideo, callEnded, stream, call } =
    useContext(SocketContext);

  return (
    <div className=" bg-zinc-900 w-[80%] h-[600px] m-auto mt-4 flex justify-center p-4">
      {stream && (
        <div className="bg-zinc-800 flex-1 border-4 border-blue-400">
          <h2>{name || "Name"}</h2>
          <video
            playsInline
            muted
            ref={myVideo}
            autoPlay
            className="w-[100%] h-[90%]"
          />
        </div>
      )}
      {callAccepted && !callEnded && (
        <div className="bg-zinc-800 flex-1 border-4 border-blue-400">
          <h2>{call?.name || "Name"}</h2>
          <video
            playsInline
            ref={userVideo}
            autoPlay
            width={"100%"}
            height={"100%"}
          />
        </div>
      )}
    </div>
  );
};

const Options = ({ children }) => {
  const { me, callAccepted, name, setName, callEnded, leaveCall, callUser } =
    useContext(SocketContext);
  const [idToCall, setIdToCall] = useState("");
  return (
    <div className="text-2xl text-blue-900 font-bold">
      <div className="m-auto mt-4 p-4 bg-white w-[80%] h-[180px] overflow-scroll">
        <div className="flex gap-4">
          <div>
            <h2 className="">Account Info</h2>
            <input
              className=" p-2 bg-blue-100"
              type="text"
              name="name"
              value={name}
              placeholder="Name ..."
              onChange={(e) => setName(e.target.value)}
            />
            <br />
            <CopyToClipboard text={me}>
              <button className="mt-2 p-2 bg-blue-700 text-white text-lg rounded-lg">
                Copy your Id
              </button>
            </CopyToClipboard>
          </div>
          <div>
            <h2 className="">Make a call</h2>
            <input
              className=" p-2 bg-blue-100"
              type="text"
              name="name"
              value={idToCall}
              placeholder="Call ..."
              onChange={(e) => setIdToCall(e.target.value)}
            />
            <br />
            {callAccepted && !callEnded ? (
              <button
                className="mt-2 p-2 bg-red-500 rounded-lg"
                onClick={leaveCall}
              >
                Hang Up
              </button>
            ) : (
              <button
                className="mt-2 p-2 bg-green-500 rounded-lg"
                onClick={() => callUser(idToCall)}
              >
                Call
              </button>
            )}
          </div>
        </div>
        {children}
      </div>
    </div>
  );
};

const Notifications = () => {
  const { answerCall, call, callAccepted } = useContext(SocketContext);

  return (
    <>
      {call.isReceivingCall && !callAccepted && (
        <div style={{ display: "flex", justifyContent: "space-around" }}>
          <h1>{call.name} is calling:</h1>
          <button className="mt-2 p-2 bg-green-500" onClick={answerCall}>
            Answer
          </button>
        </div>
      )}
    </>
  );
};

export default VideoChat;
